@model List<MCQInterviews.Models.ViewModels.McqQuestionWithOptionsViewModel>

<script>
    // Set the countdown time in seconds
    var countdownTimeInSeconds = @ViewBag.McqDuration * 60;

    // Function to update the countdown timer
    function updateTimer() {
        var minutes = Math.floor(countdownTimeInSeconds / 60);
        var seconds = countdownTimeInSeconds % 60;

        // Display the countdown timer
        document.getElementById('countdownTimerContainer').innerText = minutes + 'm ' + seconds + 's';

        // Decrease the countdown time
        countdownTimeInSeconds--;

        // Check if the countdown reached zero
        if (countdownTimeInSeconds < 0) {
            // Submit the form when the timer reaches zero
            document.getElementById('submitMCQ').click();
        } else {
            // Call the function again after 1 second
            setTimeout(updateTimer, 1000);
        }
    }

    // Call the updateTimer function when the page loads
    window.onload = updateTimer;
</script>


<div class="">
    <!-- Display the countdown timer -->
    <div id="countdownTimerContainer" class="text-end text-danger h1"></div>
</div>
<div class="container py-2">
    <div class="card">
        <div class="card-header">
            <h5 class="text-primary text-primary text-center">MCQ Test</h5>
        </div>
        <div class="card-body">
            <form asp-controller="Mcq" asp-action="ProcessAnswer" method="post">
                <input type="hidden" class="form-control" name="McqId" value="@ViewBag.McqId" />
                @for (int i = 0; i < Model.Count; i++)
                {
                    var questionWithOptions = Model[i];
                    <div class="card mt-3">
                        <div class="card-header">
                            <h5 class="text-primary">Question @(i + 1):</h5><strong> @questionWithOptions.QuestionText</strong>
                        </div>
                        <div class="card-body">
                            @for (int j = 0; j < questionWithOptions.Options.Count; j++)
                            {
                                var option = questionWithOptions.Options[j];
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="SelectedOptions[@i]" value="@option.OptionId">
                                    <label class="form-check-label" for="SelectedOptions[@i]">
                                        @GetOptionLetter(j + 1) - @option.OptionText
                                    </label>
                                </div>
                            }
                            <input type="hidden" name="QuestionIds[@i]" value="@questionWithOptions.QuestionId">
                        </div>
                    </div>
                }

                <div class="mt-4">
                    <button type="submit" class="btn btn-primary col-6" id="submitMCQ">Submit your MCQ</button>
                </div>
            </form>
        </div>
    </div>

</div>

@functions {
    string GetOptionLetter(int optionNumber)
    {
        char letter = (char)('a' + optionNumber - 1);
        return letter.ToString().ToLower();
    }
}
